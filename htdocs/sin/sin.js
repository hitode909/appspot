// Generated by CoffeeScript 1.4.0
var Sin;

Sin = (function() {

  function Sin(container) {
    this.container = container;
    this.osc = T("sin", 400);
    this.bind();
    this.load();
  }

  Sin.prototype.bind = function() {
    var _this = this;
    return this.container.find('.kill').on('click', function() {
      _this.osc.pause();
      return _this.container.remove();
    });
  };

  Sin.prototype.alive = function() {
    return this.container.is(':visible');
  };

  Sin.prototype.load = function() {
    var _this = this;
    this.play();
    this.freq = +this.container.find('input').val();
    if (this.freq === this.lastFreq) {
      return;
    }
    this.lastFreq = this.freq;
    this.osc.freq = this.freq;
    this.container.find('.hz').text(this.freq);
    if (this.rangeTimer) {
      clearTimeout(this.rangeTimer);
    }
    return this.rangeTimer = setTimeout(function() {
      _this.setRange();
      return _this.rangeTimer = null;
    }, 500);
  };

  Sin.prototype.play = function() {
    return this.osc.play();
  };

  Sin.prototype.volume = function(v) {
    return this.osc.mul = v;
  };

  Sin.prototype.set = function(freq) {
    this.container.find('input').val(freq);
    return this.load();
  };

  Sin.prototype.setRange = function() {
    var input, max, min, val;
    input = this.container.find('input');
    min = +input.attr('min');
    max = +input.attr('max');
    val = +input.val();
    if (val === 0) {
      return;
    }
    if (val / max > 0.7) {
      input.attr('max', max * 2);
    }
    if (val / max < 0.3) {
      return input.attr('max', max / 2);
    }
  };

  return Sin;

})();

$(function() {
  var add_sin, oscs, timer;
  oscs = [];
  add_sin = function($container) {
    return oscs.push(new Sin($container));
  };
  $('.osc').each(function() {
    return add_sin($(this));
  });
  timer = T("interval", 100, function() {
    var osc, _i, _len, _results;
    oscs = (function() {
      var _i, _len, _results;
      _results = [];
      for (_i = 0, _len = oscs.length; _i < _len; _i++) {
        osc = oscs[_i];
        if (osc.alive()) {
          _results.push(osc);
        }
      }
      return _results;
    })();
    _results = [];
    for (_i = 0, _len = oscs.length; _i < _len; _i++) {
      osc = oscs[_i];
      _results.push(osc.load());
    }
    return _results;
  });
  $('.add').click(function() {
    var $new_container;
    $new_container = $('.osc:last').clone();
    $new_container.find('input[name="pitch"]').val($new_container.find('input[name="pitch"]').val() * 1.1);
    $('.osc:last').after($new_container);
    return add_sin($new_container);
  });
  return timer.on();
});
