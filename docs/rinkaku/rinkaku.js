// Generated by CoffeeScript 1.6.3
var Filter, flatten, main;

window.requestAnimationFrame = (function() {
  return window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame || window.msRequestAnimationFrame || function(callback, element) {
    return window.setTimeout(function() {
      return callback();
    }, 1000 / 60);
  };
})();

flatten = function(a) {
  return [].concat.apply([], a);
};

Filter = (function() {
  function Filter(width, height) {
    this.width = width;
    this.height = height;
    this.canvas = document.createElement('canvas');
    this.canvas.width = this.width;
    this.canvas.height = this.height;
    this.ctx = this.canvas.getContext('2d');
    this.kernels = [];
    this.flatten_kernels = [];
  }

  Filter.prototype.setKernel = function(kernel, rgb) {
    this.kernels[rgb] = kernel;
    return this.flatten_kernels[rgb] = flatten(kernel);
  };

  Filter.prototype.process = function(image, width, height, cb) {
    var bitmap, i, index, kernel, kernel_radius, kernel_size, offset_px_x, offset_px_y, offset_rgb, result, sliced, v, x, y, _i, _j, _k, _l, _ref, _ref1, _ref2;
    this.ctx.drawImage(image, 0, 0, width, height, 0, 0, this.width, this.height);
    bitmap = this.ctx.getImageData(0, 0, this.width, this.height);
    result = this.ctx.createImageData(this.width, this.height);
    kernel_size = this.kernels[0][0].length;
    kernel_radius = this.kernels[0][0].length - 1 / 2;
    for (y = _i = 1, _ref = this.height - 2; 1 <= _ref ? _i <= _ref : _i >= _ref; y = 1 <= _ref ? ++_i : --_i) {
      offset_px_y = y * this.width;
      for (x = _j = 1, _ref1 = this.width - 2; 1 <= _ref1 ? _j <= _ref1 : _j >= _ref1; x = 1 <= _ref1 ? ++_j : --_j) {
        offset_px_x = x;
        sliced = this.ctx.getImageData(x - kernel_radius, y - kernel_radius, kernel_size, kernel_size).data;
        index = (offset_px_y + offset_px_x) * 4;
        for (offset_rgb = _k = 0; _k <= 2; offset_rgb = ++_k) {
          kernel = this.flatten_kernels[offset_rgb];
          if (!kernel) {
            continue;
          }
          v = 0;
          for (i = _l = 0, _ref2 = kernel.length - 1; 0 <= _ref2 ? _l <= _ref2 : _l >= _ref2; i = 0 <= _ref2 ? ++_l : --_l) {
            v += (sliced[i * 4] * 0.29 + sliced[i * 4 + 1] * 0.58 + sliced[i * 4] * 0.11) * kernel[i];
          }
          if (v < 0) {
            v *= -1;
          }
          if (v > 255) {
            v = 255;
          }
          result.data[index + offset_rgb] = v;
        }
        result.data[index + 3] = 255;
      }
    }
    this.ctx.putImageData(result, 0, 0);
    return cb(this.canvas.toDataURL());
  };

  return Filter;

})();

main = function() {
  var animationLoop, error, filter, img, process, success, video;
  video = document.querySelector('#video');
  img = document.querySelector('#screen');
  filter = null;
  process = function() {
    var scale;
    if (!video.videoWidth) {
      return;
    }
    if (!filter) {
      scale = 0.25;
      filter = new Filter(video.videoWidth * scale, video.videoHeight * scale);
      filter.setKernel([[-1, -2, -1], [0, 0, 0], [1, 2, 1]], 0);
      filter.setKernel([[-1, 0, 1], [-2, 0, 2], [-1, 0, 1]], 1);
    }
    return filter.process(video, video.videoWidth, video.videoHeight, function(url) {
      return img.src = url;
    });
  };
  success = function(stream) {
    video = document.querySelector('#video');
    video.src = window.URL.createObjectURL(stream);
    return video.play();
  };
  error = function() {
    return alert('error');
  };
  if (navigator.webkitGetUserMedia) {
    navigator.webkitGetUserMedia({
      video: true
    }, success, error);
  } else {
    navigator.mozGetUserMedia({
      video: true
    }, success, error);
  }
  animationLoop = function() {
    process();
    return window.requestAnimationFrame(animationLoop);
  };
  return animationLoop();
};

main();
